{"ast":null,"code":"const exec = require(\"child_process\").exec;\nconst log = console.debug;\n\n/**\n * @param input - URL, local image path or Buffer\n * @param config - any OCR options and control parameters\n * @returns default output format is text\n */\nfunction recognize(input, config = {}) {\n  const options = getOptions(config);\n  const binary = config.binary || \"tesseract\";\n  const isSingleLocalFile = typeof input === \"string\" && !input.match(/^https?:\\/\\//);\n  const inputOption = isSingleLocalFile ? `\"${input}\"` : \"stdin\";\n  const command = [binary, inputOption, \"stdout\", ...options].join(\" \");\n  if (config.debug) log(\"command\", command);\n  return new Promise((resolve, reject) => {\n    const child = exec(command, (error, stdout, stderr) => {\n      if (config.debug) log(stderr);\n      if (error) reject(error);\n      resolve(stdout);\n    });\n    if (inputOption === \"stdin\") pipeInput(input, child);\n  });\n}\nfunction pipeInput(input, child) {\n  if (typeof input === \"string\") {\n    const protocol = input.match(/^(.*?):/)[1];\n    return require(protocol).get(input, response => {\n      response.pipe(child.stdin);\n    });\n  }\n  if (Array.isArray(input)) input = Buffer.from(input.join(\"\\n\"), \"utf-8\");\n  child.stdin.write(input);\n  child.stdin.end();\n}\nfunction getOptions(config) {\n  const ocrOptions = [\"tessdata-dir\", \"user-words\", \"user-patterns\", \"psm\", \"oem\", \"dpi\"];\n  return Object.entries(config).map(([key, value]) => {\n    if ([\"debug\", \"presets\", \"binary\"].includes(key)) return;\n    if (key === \"lang\") return `-l ${value}`;\n    if (ocrOptions.includes(key)) return `--${key} ${value}`;\n    return `-c ${key}=${value}`;\n  }).concat(config.presets) // options -l and --psm must occur before any CONFIGFILE\n  .filter(Boolean);\n}\nmodule.exports = {\n  recognize\n};","map":{"version":3,"names":["exec","require","log","console","debug","recognize","input","config","options","getOptions","binary","isSingleLocalFile","match","inputOption","command","join","Promise","resolve","reject","child","error","stdout","stderr","pipeInput","protocol","get","response","pipe","stdin","Array","isArray","Buffer","from","write","end","ocrOptions","Object","entries","map","key","value","includes","concat","presets","filter","Boolean","module","exports"],"sources":["C:/Users/mayan/OneDrive/Desktop/ml_project/ocr-react-app/node_modules/node-tesseract-ocr/src/index.js"],"sourcesContent":["const exec = require(\"child_process\").exec\nconst log = console.debug\n\n/**\n * @param input - URL, local image path or Buffer\n * @param config - any OCR options and control parameters\n * @returns default output format is text\n */\nfunction recognize(input, config = {}) {\n  const options = getOptions(config)\n  const binary = config.binary || \"tesseract\"\n  const isSingleLocalFile = typeof input === \"string\" && !input.match(/^https?:\\/\\//)\n  const inputOption = isSingleLocalFile ? `\"${input}\"` : \"stdin\"\n  const command = [binary, inputOption, \"stdout\", ...options].join(\" \")\n\n  if (config.debug) log(\"command\", command)\n\n  return new Promise((resolve, reject) => {\n    const child = exec(command, (error, stdout, stderr) => {\n      if (config.debug) log(stderr)\n      if (error) reject(error)\n      resolve(stdout)\n    })\n    if (inputOption === \"stdin\") pipeInput(input, child)\n  })\n}\n\nfunction pipeInput(input, child) {\n  if (typeof input === \"string\") {\n    const protocol = input.match(/^(.*?):/)[1]\n    return require(protocol).get(input, (response) => {\n      response.pipe(child.stdin)\n    })\n  }\n\n  if (Array.isArray(input)) input = Buffer.from(input.join(\"\\n\"), \"utf-8\")\n  child.stdin.write(input)\n  child.stdin.end()\n}\n\nfunction getOptions(config) {\n  const ocrOptions = [\"tessdata-dir\", \"user-words\", \"user-patterns\", \"psm\", \"oem\", \"dpi\"]\n\n  return Object.entries(config)\n    .map(([key, value]) => {\n      if ([\"debug\", \"presets\", \"binary\"].includes(key)) return\n      if (key === \"lang\") return `-l ${value}`\n      if (ocrOptions.includes(key)) return `--${key} ${value}`\n\n      return `-c ${key}=${value}`\n    })\n    .concat(config.presets) // options -l and --psm must occur before any CONFIGFILE\n    .filter(Boolean)\n}\n\nmodule.exports = {\n  recognize,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}